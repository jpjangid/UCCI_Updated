import { Component, OnInit } from '@angular/core';
import { ApiService } from 'src/app/services/api.service';
import { FormControl, FormGroup, Validators } from '@angular/forms';
import { MessageService, ConfirmationService } from 'primeng/api';
import { CommonClass } from 'src/app/common';

@Component({
  selector: 'app-document-attestation-list',
  templateUrl: './document-attestation-list.component.html',
  styleUrls: ['./document-attestation-list.component.scss'],
  providers: [MessageService, ConfirmationService],

})
export class DocumentAttestationListComponent implements OnInit {
  docAttestationList: any = [];
  Modal: boolean = false;
  selectedFile: File[] = [];
  showApproveForm: boolean = false;
  showRejectForm: boolean = false;
  submitted = false;
  id: any;
  verifyDocumentAttestationFiles: any = {};

  constructor(private apiservice: ApiService, private messageService: MessageService) { }

  ngOnInit(): void {
    // this.localStorage = this.commonFunction.getLocalStorage();
    this.getAllDocumentList();
    // this.addLink();
  }
  getAllDocumentList() {
    this.apiservice.getDocumentAttestationList().subscribe((res: any) => {
      this.docAttestationList = res.data;
      console.log(this.docAttestationList);
      // console.log(this.docAttestationList);
    })
  }
  // form control
  documentAttestUploadForm = new FormGroup({
    uploaddocument: new FormControl(''),
    otherdocument: new FormControl(''),
    remark: new FormControl(''),
    reason: new FormControl('')
  });
  // verify document by id
  verifyDocumentAttestation() {
    let formData = new FormData();
    let data = this.documentAttestUploadForm.value;
    console.log(this.documentAttestUploadForm.valid, data);
    if (this.showApproveForm == true) {
      formData.append('invoice',this.verifyDocumentAttestationFiles.invoice);
      formData.append('other_document', this.verifyDocumentAttestationFiles.other_document);
      formData.append('remark', data?.remark);
      formData.append('status', 'approve');
      setTimeout(() => {
        this.Modal = false;
      }, 1000);
    }
    else {
      formData.append('reason', data.reason);
      formData.append('status', 'reject');
      setTimeout(() => {
        this.Modal = false;
      }, 1000);
    }
    // if (this.documentAttestUploadForm.valid) {
      this.apiservice.verifyDocumentAttestation(this.id, formData).subscribe((res: any) => {
      console.log(formData)
      console.log(res);
      // this.downloadFile(res , 'test');
      this.messageService.add({
        severity: 'Success',
        summary: 'Success',
        detail: res.message
      });
    })
    // }
    if (this.showApproveForm) {
      this.submitted = true;
    }
    if (this.showRejectForm) {
      this.submitted = true;
    }
  }
  // send documents in binary form
  uploadInvoiceDoc(event: any, string?: any) {
    console.log(event , 'invoice');
    this.selectedFile = event.target.files[0];
    if (string == 'invoice') {
      this.verifyDocumentAttestationFiles['invoice'] = this.selectedFile;
    }

    console.log(this.selectedFile , this.documentAttestUploadForm.value , this.verifyDocumentAttestationFiles);
  }

  uploadOtherDoc(event: any, string?: any) {
    console.log(string);    
    this.selectedFile = event.target.files[0];
    if (string == 'other_document') {
      console.log('other');
      this.verifyDocumentAttestationFiles['other_document'] = this.selectedFile;
    }
    else if (string == 'invoice') {
      console.log('invoice');
      this.verifyDocumentAttestationFiles['invoice'] = this.selectedFile;
    }
    console.log(this.selectedFile , this.documentAttestUploadForm.value , this.verifyDocumentAttestationFiles);
  }
  // open dialog
  approveDialog(id: any) {
    this.id = id;
    this.Modal = true;
    this.showApproveForm = true;
    this.showRejectForm = false;
    this.documentAttestUploadForm.controls["uploaddocument"].addValidators([Validators.required])
    this.documentAttestUploadForm.controls["otherdocument"].addValidators([Validators.required])
    this.documentAttestUploadForm.controls["remark"].addValidators([Validators.required])
    this.documentAttestUploadForm.controls["reason"].removeValidators([Validators.required])
  }
  rejectDialog(id: any) {
    this.id = id;
    this.Modal = true;
    this.showRejectForm = true;
    this.showApproveForm = false;
    this.documentAttestUploadForm.controls["reason"].addValidators([Validators.required])
    this.documentAttestUploadForm.controls["uploaddocument"].removeValidators([Validators.required])
    this.documentAttestUploadForm.controls["otherdocument"].removeValidators([Validators.required])
    this.documentAttestUploadForm.controls["remark"].removeValidators([Validators.required])
  }
  // convenience getter for easy access to form fields
  get f() {
    return this.documentAttestUploadForm.controls;
  }
  // download pdf file process
  addLink(value?: any, string?: any) {
    console.log(this.docAttestationList, value)
    if (string == 'invoice') {
      return `https://ucci.brandtalks.in/storage/doc_invoice/` + value;
    }
    else {
      return `https://ucci.brandtalks.in/storage/doc_attestation_other/` + value;
    }
  }


  downLoadPdf(data: any, string?: any) {
    let value = this.addLink(data, string);
    // var blob = new Blob([value], { type: 'application/pdf' });
    //var url = window.URL.createObjectURL(blob);
    var anchor = document.createElement("a");
    anchor.download = value;
    anchor.href = value;
    anchor.target = "_blank";
    anchor.click();
  }
  // end download pdf file process

}
