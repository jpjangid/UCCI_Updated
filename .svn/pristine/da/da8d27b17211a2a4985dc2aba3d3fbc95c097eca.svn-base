import { HttpErrorResponse } from '@angular/common/http';
import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';
import { FormBuilder, Validators } from '@angular/forms';
import * as moment from 'moment';
import { NgWizardService } from 'ng-wizard';
import { NgxSpinnerService } from 'ngx-spinner';
import { MessageService } from 'primeng/api';
import { FacilityBookingService } from 'src/app/services/facility-booking.service';

@Component({
  selector: 'app-booking-form',
  templateUrl: './booking-form.component.html',
  styleUrls: ['./booking-form.component.scss'],
})
export class BookingFormComponent implements OnInit {
  @Output() mode: any = new EventEmitter<any>();
  @Input() selectedData: any;

  facilityBookingForm = this.fb.group({
    booking_type: ['', Validators.required],
    booking_date: ['', Validators.required],
    booked_by: ['', Validators.required],
    place: ['', Validators.required],
    additional_services: [''],
    support_staff: [''],
  });
  radioData: any;

  selectedOptionState: boolean = false;

  changedValue: string;

  supportStaffValue: string;

  meetingTypeState: boolean = false;

  date: any;

  moment = moment;
  constructor(
    private fb: FormBuilder,
    private FacilityBookingService: FacilityBookingService,
    private messageService: MessageService,
    private ngWizardService: NgWizardService,
    private spinner: NgxSpinnerService
  ) {}

  ngOnInit(): void {
    this.spinner.show();
    this.getData();
    var role = JSON.parse(localStorage.getItem('access_token')).role;
    if (role == 'UCCI Staff' || role == 'Admin') {
      this.meetingTypeState = true;
    }
  }

  ngOnChanges() {
    this.facilityBookingForm.patchValue({
      place: this.selectedData.value.place.fee_name,
    });

    this.facilityBookingForm.patchValue({
      booking_date: this.selectedData.value.date,
    });

    var supportStaff = this.facilityBookingForm.value.support_staff
      ? 'Support Staff'
      : '';
    this.facilityBookingForm.patchValue({ support_staff: supportStaff });

    this.facilityBookingForm.value.additional_services = this.changedValue;
    this.facilityBookingForm.value.booking_type = 'external';

    console.log(this.facilityBookingForm.value);

    // set meeting type as user role

    var role = JSON.parse(localStorage.getItem('access_token')).role;

    if (role == 'Nominee 2' || role == 'Nominee 1' || role == 'NM') {
      this.facilityBookingForm.patchValue({ booking_type: 'external' });
    } else if (role == 'UCCI Staff' || role == 'Admin') {
      this.meetingTypeState = true;
    }
  }

  onBackPress() {
    this.ngWizardService.previous();
  }

  onFacilityDetailsSubmit() {
    this.spinner.show();

    // post Form data on api
    if (this.facilityBookingForm.valid) {
      if (this.facilityBookingForm.value.booking_type == 'external') {
        this.FacilityBookingService.insertFacilityData(
          this.facilityBookingForm.value
        ).subscribe(
          (res) => {
            // console.log("response :", res);
            this.spinner.hide();

            this.mode.emit({ selectedPlaceData: res });
            this.ngWizardService.next();
          },
          (error: HttpErrorResponse) => {
            console.log(error);
            this.spinner.hide();
          }
        );
      } else if (this.facilityBookingForm.value.booking_type == 'internal') {
        this.FacilityBookingService.insertFacilityData(
          this.facilityBookingForm.value
        ).subscribe(
          (res) => {
            this.mode.emit({ selectedPlaceData: res });
            this.spinner.hide();
          },
          (error: HttpErrorResponse) => {
            console.log(error);
            this.messageService.add({
              severity: 'error',
              summary: 'Error',
              detail: error.error.message,
            });
            this.spinner.hide();
          }
        );
      }
    }else if (this.facilityBookingForm.invalid) {
      this.messageService.add({
        severity: 'error',
        summary: 'Some field are not filled',
        detail: 'Please fill all details',
      });
    }
  }

  getData() {
    this.FacilityBookingService.getFacilityData().subscribe(
      (res) => {
        this.radioData = res.additionals;

        this.supportStaffValue = res.support[0].fee_name;
        this.spinner.hide();
        // console.log("support ", this.supportStaffValue);
      },
      (error: HttpErrorResponse) => {
        console.log(error);
        this.spinner.hide();
      }
    );
  }
}
