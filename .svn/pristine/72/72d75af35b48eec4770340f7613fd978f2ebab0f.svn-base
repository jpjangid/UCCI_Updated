import { Component, ElementRef, OnInit, ViewChild } from '@angular/core';
import { MessageService } from 'primeng/api';
import { Validators, FormBuilder } from '@angular/forms';
import { ConfirmationService, ConfirmEventType } from 'primeng/api';
import { FeesMasterService } from 'src/app/services/fees-master.service';
import { HttpErrorResponse } from '@angular/common/http';
import { NgxSpinnerService } from 'ngx-spinner';

@Component({
  selector: 'app-fees-master',
  templateUrl: './fees-master.component.html',
  styleUrls: ['./fees-master.component.scss'],
  providers: [MessageService, ConfirmationService],
})
export class FeesMasterComponent implements OnInit {
  filterVal: string;
  spinnerMsg: string;
  clonedProducts: { [s: string]: any } = {};

  constructor(
    private FeesMasterService: FeesMasterService,
    private fb: FormBuilder,
    private messageService: MessageService,
    private confirmationService: ConfirmationService,
    private spinner: NgxSpinnerService
  ) {}

  breadcrumb: any[] = [
    {
      title: 'Fees Master',
      subTitle: 'Masters',
    },
  ];

  position: string;

  postFeesForm = this.fb.group({
    fee_name: ['', Validators.required],
    fee_category: [''],
    member_amount: [''],
    non_member_amount: [''],
    taxes: [''],
  });

  feesData: any[];

  loading: boolean = true;

  ngOnInit(): void {
    this.getMemberCategories();
    this.spinner.show();
    this.spinnerMsg = 'loading...';
  }
  /********************************************************************
                Add Member Categories Master
********************************************************************/

  onSubmit() {
    // TODO: Use EventEmitter with form value
    // this.memberCategoryName = this.postMemberClassificationForm.value.name;

    /---------- Insert Method ---------/;
    // if (this.mode == 'insert') {
    if (this.postFeesForm.invalid) {
      this.messageService.add({
        severity: 'error',
        summary: 'Please fill all details!',
        detail: 'Some details are not filled!',
      });
    } else if (this.postFeesForm.valid) {
      // console.log("data : ", this.postMemberClassificationForm.value);
      this.FeesMasterService.insertFeesMaster(
        this.postFeesForm.value
      ).subscribe((data) => {
        console.log('data : ', data);

        this.getMemberCategories();
        this.messageService.add({
          severity: 'success',
          summary: 'Success',
          detail: 'Member category added successfully',
        });
      });
    }
  }
  /********************************************************************
                Get Member Categories Master
********************************************************************/

  getMemberCategories() {
    this.FeesMasterService.getFeesMaster().subscribe(
      (res) => {
        this.feesData = res.data;
        // console.log("res", res);
        this.spinner.hide();
        this.loading = false;
        this.postFeesForm.reset();
      },
      (error: HttpErrorResponse) => {
        console.log(error);
        this.loading = false;
        this.spinner.hide();
      }
    );
  }

  /********************************************************************
                  Edit Member Categories Master
  ********************************************************************/

  editMemberCategoryMaster(event: any) {
    this.clonedProducts[event.id] = { ...event };
  }

  onRowEditSave(fee: any) {
    this.loading = true;

    if (fee.fee_name) {
      if (fee.fee_category) {
        if (fee.member_amount) {
          if (fee.non_member_amount) {
            if (fee.taxes) {
              this.FeesMasterService.editFeesMaster(fee, fee.id).subscribe(
                (res) => {
                  this.messageService.add({
                    severity: 'success',
                    summary: 'Success',
                    detail: 'Member category changed successfully',
                  });

                  this.loading = false;
                }
              );
            } else this.error();
          } else this.error();
        } else this.error();
      } else this.error();
    } else this.error();
  }

  onRowEditCancel(fee: any, index: number) {
    this.feesData[index] = this.clonedProducts[fee.id];
  }
  
  error() {
    this.messageService.add({
      severity: 'error',
      summary: 'Please fill all details!',
      detail: 'some details are not filled!',
    });
    this.loading = false;
  }

  /********************************************************************
                Delet Member Categories Master
********************************************************************/

  deleteMaster(event) {
    console.log('fewcds');

    this.confirmationService.confirm({
      message: 'Do you want to delete this record?',
      header: 'Delete Confirmation',
      icon: 'pi pi-info-circle',
      accept: () => {
        this.FeesMasterService.deleteFeesMaster(event.id).subscribe((data) => {
          this.getMemberCategories();
          this.messageService.add({
            severity: 'success',
            summary: 'Success',
            detail: 'Member category deleted successfully',
          });
        });
      },
      reject: (type) => {
        switch (type) {
          case ConfirmEventType.REJECT:
            this.messageService.add({
              severity: 'error',
              summary: 'Rejected',
              detail: 'You have rejected',
            });
            break;
          case ConfirmEventType.CANCEL:
            this.messageService.add({
              severity: 'warn',
              summary: 'Cancelled',
              detail: 'You have cancelled',
            });
            break;
        }
      },
    });
  }

  reset(dt1) {
    dt1.reset();
    this.filterVal = '';
  }
}
