import {
  Component,
  ElementRef,
  Inject,
  OnInit,
  PLATFORM_ID,
  ViewChild,
} from '@angular/core';
import { MessageService } from 'primeng/api';
import {
  FormGroup,
  FormControl,
  Validators,
  FormBuilder,
} from '@angular/forms';
import { HttpClient } from '@angular/common/http';
import { isPlatformBrowser } from '@angular/common';
import { ConfirmationService, ConfirmEventType } from 'primeng/api';
import { TurnoverMasterService } from 'src/app/services/turnover-master.service';
import { MembershipTypeMasterService } from 'src/app/services/membership-type-master.service';
import { NgxSpinnerService } from 'ngx-spinner';

@Component({
  selector: 'app-membership-type-master',
  templateUrl: './membership-type-master.component.html',
  styleUrls: ['./membership-type-master.component.scss'],
  providers: [MessageService, ConfirmationService],
})
export class MembershipTypeMasterComponent implements OnInit {
  filterVal: string;
  spinnerMsg: string;
  clonedProducts: { [s: string]: any } = {};

  breadcrumb: any[] = [
    {
      title: 'Membership Type Master',
      subTitle: 'Masters',
    },
  ];
  postMembershipTypeForm = this.fb.group({
    membership_name: ['', Validators.required],
    type_of_fee: ['', Validators.required],
    particulars: ['', Validators.required],
    membership_fee: ['', Validators.required],
    tax_percentage: ['', Validators.required],
  });


  feesData: any[];

  loading: boolean = true;
  
  constructor(
    private MembershipTypeMasterService: MembershipTypeMasterService,
    private fb: FormBuilder,
    private messageService: MessageService,
    private confirmationService: ConfirmationService,
    private spinner: NgxSpinnerService
  ) {}  

  // @ViewChild('focus') edit: ElementRef;


  ngOnInit(): void {
    this.getMemberCategories();
    this.spinner.show();
    this.spinnerMsg = 'loading...'
  }
  /********************************************************************
                Add Member Categories Master
********************************************************************/

  onSubmit(membershipType) {

      if (this.postMembershipTypeForm.invalid) {
        this.messageService.add({
          severity: 'error',
          summary: 'Please fill all details!',
          detail: 'Some details are not filled!',
        });
      } else if (this.postMembershipTypeForm.valid) {
        this.MembershipTypeMasterService.insertMembershipTypeMaster(
          this.postMembershipTypeForm.value
        ).subscribe((data) => {
          console.log('data : ', data);
          membershipType.resetForm();
          this.postMembershipTypeForm.reset();
          this.getMemberCategories();
          this.messageService.add({
            severity: 'success',
            summary: 'Success',
            detail: 'Membership added successfully',
          });
        });
      }
  
    /---------- Edit Method ---------/
      // if (this.postMembershipTypeForm.invalid) {

      // } else if (this.postMembershipTypeForm.valid) {
      //   this.MembershipTypeMasterService.editMembershipTypeMaster(
      //     this.postMembershipTypeForm.value,
      //     1
      //   ).subscribe((data) => {
      //     console.log('data : ', data);
      //     this.getMemberCategories();
      //     this.messageService.add({
      //       severity: 'success',
      //       summary: 'Success',
      //       detail: 'Member category changed successfully',
      //     });
      //   });
      // }
  }

  /********************************************************************
                Get Member Categories Master
********************************************************************/

  getMemberCategories() {
    this.MembershipTypeMasterService.getMembershipTypeMaster().subscribe(
      (res) => {
        this.feesData = res.data;
        console.log('res', res);

        this.loading = false;
        this.spinner.hide();
      }
    );
  }

  /********************************************************************
                  Edit Member Categories Master
  ********************************************************************/

  editMemberCategoryMaster(event: any) {
    this.clonedProducts[event.id] = { ...event };
  }

  onRowEditSave(e: any) {
    this.loading = true;

    if (e.membership_name) {
      if (e.type_of_fee) {
        if (e.particulars) {
          if (e.membership_fee) {
            if (e.tax_percentage) {
              this.MembershipTypeMasterService.editMembershipTypeMaster(e, e.id).subscribe(
                (res) => {
                  this.messageService.add({
                    severity: 'success',
                    summary: 'Success',
                    detail: 'Member category changed successfully',
                  });

                  this.loading = false;
                }
              );
            } else this.error();
          } else this.error();
        } else this.error();
      } else this.error();
    } else this.error();
  }
  
  onRowEditCancel(fee: any, index: number) {
    this.feesData[index] = this.clonedProducts[fee.id];
  }

  error() {
    this.messageService.add({
      severity: 'error',
      summary: 'Please fill all details!',
      detail: 'Some details are not filled!',
    });
    this.loading = false;
  }

  /********************************************************************
                Delet Member Categories Master
********************************************************************/

  deleteMaster(event: any) {

    this.confirmationService.confirm({
      message: 'Do you want to delete this record?',
      header: 'Delete Confirmation',
      icon: 'pi pi-info-circle',
      accept: () => {
        this.MembershipTypeMasterService.deleteMembershipTypeMaster(
          event.id
        ).subscribe((data) => {
          this.getMemberCategories();
          this.messageService.add({
            severity: 'success',
            summary: 'Success',
            detail: 'Member category deleted successfully',
          });
        });
      },
      reject: (type) => {
        switch (type) {
          case ConfirmEventType.REJECT:
            this.messageService.add({
              severity: 'error',
              summary: 'Rejected',
              detail: 'You have rejected',
            });
            break;
          case ConfirmEventType.CANCEL:
            this.messageService.add({
              severity: 'warn',
              summary: 'Cancelled',
              detail: 'You have cancelled',
            });
            break;
        }
      },
    });
  }
  reset(dt1) {
    dt1.reset();
    this.filterVal = '';
  }
}
