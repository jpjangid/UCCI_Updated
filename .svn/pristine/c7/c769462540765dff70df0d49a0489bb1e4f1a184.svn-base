import {
  Component,
  ElementRef,
  Inject,
  OnInit,
  PLATFORM_ID,
  ViewChild,
} from '@angular/core';
import { MessageService } from 'primeng/api';
import { MemberCategoriesMasterService } from '../../../services/member-categories.service';
import {
  FormGroup,
  FormControl,
  Validators,
  FormBuilder,
} from '@angular/forms';
import { HttpClient } from '@angular/common/http';
import { isPlatformBrowser } from '@angular/common';
import { ConfirmationService, ConfirmEventType } from 'primeng/api';
import { NgxSpinnerService } from 'ngx-spinner';

@Component({
  selector: 'app-member-categories',
  templateUrl: './member-categories.component.html',
  styleUrls: ['./member-categories.component.scss'],
  providers: [MessageService, ConfirmationService],
})
export class MemberCategoriesComponent implements OnInit {
  constructor(
    private MemberCategoriesMasterService: MemberCategoriesMasterService,
    private fb: FormBuilder,
    private messageService: MessageService,
    private confirmationService: ConfirmationService,
    private spinner: NgxSpinnerService
  ) {}

  @ViewChild('dt1') dataTable: ElementRef;

  breadcrumb: any[] = [
    {
      title: 'Member Categories',
      subTitle: 'Masters',
    },
  ];

  filterVal: string;

  editMemberCategory: any;

  focusState: boolean = false;

  position: string;

  postMemberCategoriesForm = this.fb.group({
    name: ['', Validators.required],
  });

  memberCategoryName: any;

  name: string = '';

  member: any[];

  loading: boolean = true;

  clonedProducts: { [s: string]: any } = {};

  spinnerMsg: string = "loading";

  ngOnInit(): void {
    this.spinner.show();
    this.getMemberCategories();

    // console.log('table data', this.dataTable);
  }

  /********************************************************************
                Add Member Categories Master
********************************************************************/

  onSubmit(categoryForm) {
    // TODO: Use EventEmitter with form value
    this.memberCategoryName = this.postMemberCategoriesForm.value.name;

    /---------- Insert Method ---------/;

    if (this.postMemberCategoriesForm.invalid) {
      this.messageService.add({
        severity: 'error',
        summary: 'Please fill all details!',
        detail: 'some details are not filled!',
      });
    } else if (this.postMemberCategoriesForm.valid) {
      this.MemberCategoriesMasterService.insertMemberCategoriesMaster(
        this.postMemberCategoriesForm.value
      ).subscribe((data) => {
        this.getMemberCategories();
        this.messageService.add({
          severity: 'success',
          summary: 'Success',
          detail: 'Member category added successfully',
        });
        this.postMemberCategoriesForm.reset();
        categoryForm.resetForm();
      });
    }
  }

  getValue() {
    console.log('data', this.postMemberCategoriesForm.invalid);
  }

  /********************************************************************
                Get Member Categories Master
********************************************************************/

  getMemberCategories() {
    this.MemberCategoriesMasterService.getMemberCategoriesMaster().subscribe(
      (res) => {
        this.member = res.data;
        this.loading = false;
        // this.postMemberCategoriesForm.reset();
        this.spinner.hide()
      }
    );
  }

  /********************************************************************
                  Edit Member Categories Master
  ********************************************************************/

  editMemberCategoryMaster(event) {
    this.clonedProducts[event.id] = { ...event };
  }

  onRowEditSave(member: any) {
    this.loading = true;
    if (member.name != '' && member.name != null) {
      this.MemberCategoriesMasterService.editMemberCategoriesMaser(
        member,
        member.id
      ).subscribe((data) => {
        this.messageService.add({
          severity: 'success',
          summary: 'Success',
          detail: 'Member category changed successfully',
        });
        this.loading = false;
      });
    } else {
      this.messageService.add({
        severity: 'error',
        summary: 'Error',
        detail: 'Please fill all details',
      });
      this.loading = false;
    }
  }

  onRowEditCancel(member: any, index: number) {
    this.member[index] = this.clonedProducts[member.id];
  }
  /********************************************************************
                Delet Member Categories Master
********************************************************************/

  deleteMaster(event) {
    console.log('fewcds');

    this.confirmationService.confirm({
      message: 'Do you want to delete this record?',
      header: 'Delete Confirmation',
      icon: 'pi pi-info-circle',
      accept: () => {
        this.MemberCategoriesMasterService.deleteMemberCategoriesMaser(
          event.id
        ).subscribe((data) => {
          this.getMemberCategories();
          this.messageService.add({
            severity: 'success',
            summary: 'Success',
            detail: 'Member category deleted successfully',
          });
        });
      },
      reject: (type) => {
        switch (type) {
          case ConfirmEventType.REJECT:
            this.messageService.add({
              severity: 'error',
              summary: 'Rejected',
              detail: 'You have rejected',
            });
            break;
          case ConfirmEventType.CANCEL:
            this.messageService.add({
              severity: 'warn',
              summary: 'Cancelled',
              detail: 'You have cancelled',
            });
            break;
        }
      },
    });
  }

  reset(dt1) {
    dt1.reset();
    this.filterVal = '';
  }
}
